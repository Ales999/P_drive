minChars = 128;
class Compile
{
	clearNewLines = 0;
//	indenting = -1;	//no indenting
	rewriteFile = 1; //append result to the proper place in the file, do not rewrite it

	class Pass_States
	{

		class State_Any
		{
			iffinal_no = -1;
			print_state1 = "class %(statetext): RscSubmenu\n";
			print_state2 = "{\n";
			indent_state1 = 8;
			print_state3 = "%(stateinit)\n";

			print_state4 = "class Items\n";
			print_state5 = "{\n";
			indent_state2 = 0;
			print_state6 = "%(statePrecondition)\n";
			indent_state3 = 16;

			class Links_2
			{
				print_link1 = "class %(linktext)\n";
				print_link2 = "{\n";
				indent_link1 = 24;
				iftofinal_no = -1;
				print_link3 = "menu = %qt(totext);\n";
				iftofinal_any = 0;
				print_link4 = "%(condition)\n";
				indent_link3 = 16;
				print_link10 = "};\n";
			};

			indent_state10 = 8;
			print_state10 = "};\n";
			indent_state11 = 0;
			print_state11 = "};\n";
			iffinal_any = 0;
		};
	};
};

class Decompile
{
	process = 1;	 //0 for not processing Decompile info
	FSMLeft	= "/*";
	FSMRight = "*/";
	class FSMPrefix
	{
		default = "";
	};
	class FSMPrefix2
	{
		default = "";
		head = "*/";
		condition = "\n";
		stateinit = "\n";
		action = "\n";
		privateVariables = "\n";
	};
	class FSMSufix
	{
		default = "";
		compile = "\n";
		condition = "\n";
		stateinit = "\n";
		action = "\n";
		state = "\n";
		head = "\n/*\n";
		link = "\n";
		privateVariables = "\n";
	};
	class FSMSufix2
	{
		default = "";
		compile = "";
		state = "\n";
		head = "\n";
		link = "\n";
	};
};