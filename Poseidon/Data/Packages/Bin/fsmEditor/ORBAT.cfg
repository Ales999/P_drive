minChars = 128;
class Compile
{
	clearNewLines = 0;
//	indenting = -1;	//no indenting
	rewriteFile = 1; //append result to the proper place in the file, do not rewrite it

	class Pass_States
	{
		print_cfg = "class %(fsmName)\n";
		print_cfgOpen = "{\n";
		indent_cfgOpen = 8;
		class State_Any
		{
			print_class = "class %(statetext)%(stateprecondition)\n";
			print_classOpen = "{\n";
			indent_classOpen = 16;
			print_content = "%(stateinit)\n";

			print_subordinatesOpen = "subordinates[] = {\n";
			indent_subordinatesOpen = 24;

			class Links_2
			{
				print_link3 = "%(totext),\n";
			};

			indent_subordinatesClose = 16;
			print_subordinatesClose = "};\n";
			indent_classClose = 8;
			print_classClose = "};\n";
		};
		indent_cfgClose = 0;
		print_cfgClose = "};";
	};
};

class Decompile
{
	process = 1;	 //0 for not processing Decompile info
	FSMLeft	= "/*";
	FSMRight = "*/";
	class FSMPrefix
	{
		default = "";
	};
	class FSMPrefix2
	{
		default = "";
		head = "*/";
		condition = "\n";
		stateinit = "\n";
		action = "\n";
		privateVariables = "\n";
	};
	class FSMSufix
	{
		default = "";
		compile = "\n";
		condition = "\n";
		stateinit = "\n";
		action = "\n";
		state = "\n";
		head = "\n/*\n";
		link = "\n";
		privateVariables = "\n";
	};
	class FSMSufix2
	{
		default = "";
		compile = "";
		state = "\n";
		head = "\n";
		link = "\n";
	};
};